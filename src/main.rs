use clap::{Parser, Subcommand};

use crate::cli::VTClient;

mod cli;
mod security;
mod serve;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    #[arg(
        long,
        global = true,
        env = "VT_ADDR",
        default_value = "127.0.0.1:5757",
        help = "Host and port in the format host:port, e.g. 127.0.0.1:5757"
    )]
    addr: String,

    #[arg(
        long,
        global = true,
        env = "VT_AUTH",
        default_value = "MY5hkACZQZbqfpuYaWjnzlbpGVQYhwqynnrpkek568g",
        help = "Authorization header value, generated by `vault init` command"
    )]
    auth: String,

    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    Serve,
    /// Initialize passcode, passphrase which will be used by server
    Init,
    /// Will read plain text and output encrypted message for you
    Create,
    /// Decrypt an existing vt protocol as plaintext
    Read {
        #[arg(help = "A string in vt protocol format, e.g. vt://mac/0xxxx")]
        vt: String,
    },
}

#[tokio::main]
async fn main() {
    let log_level = if cfg!(debug_assertions) {
        tracing::Level::DEBUG
    } else {
        tracing::Level::INFO
    };
    tracing_subscriber::fmt().with_max_level(log_level).init();
    let cli = Cli::parse();
    let vt_client = VTClient::new(cli.addr.clone(), cli.auth);

    let command_result = match &cli.command {
        Commands::Serve => serve::serve(&cli.addr).await,
        Commands::Init => cli::init(),
        Commands::Create => cli::create(vt_client).await,
        Commands::Read { vt } => cli::read(vt_client, vt.to_string()).await,
    };
    if command_result.is_err() {
        tracing::error!("Command failed: {:?}", command_result);
        std::process::exit(1);
    }
}
